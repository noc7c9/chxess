// Generated by Haxe 3.4.4
(function ($hx_exports) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Type = function() { };
Type.__name__ = true;
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
var chxess__$Chxess_Vec_$Impl_$ = {};
chxess__$Chxess_Vec_$Impl_$.__name__ = true;
chxess__$Chxess_Vec_$Impl_$._new = function(arr) {
	var this1 = [arr[0],arr[1]];
	return this1;
};
chxess__$Chxess_Vec_$Impl_$.get_rank = function(this1) {
	return this1[0];
};
chxess__$Chxess_Vec_$Impl_$.get_file = function(this1) {
	return this1[1];
};
chxess__$Chxess_Vec_$Impl_$.fromArrayInt = function(arr) {
	var this1 = [arr[0],arr[1]];
	return this1;
};
var chxess_Chxess = $hx_exports["Chxess"] = function(initialLayout,initialTurn) {
	this.turn = chxess_Color.White;
	var this1 = new haxe_ds__$HashMap_HashMapData();
	this.board = this1;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(chxess_File.A,chxess_Type.Rook);
	_g.set(chxess_File.B,chxess_Type.Knight);
	_g.set(chxess_File.C,chxess_Type.Bishop);
	_g.set(chxess_File.D,chxess_Type.Queen);
	_g.set(chxess_File.E,chxess_Type.King);
	_g.set(chxess_File.F,chxess_Type.Bishop);
	_g.set(chxess_File.G,chxess_Type.Knight);
	_g.set(chxess_File.H,chxess_Type.Rook);
	var backrowSetup = _g;
	var _g1 = 0;
	var _g2 = chxess_File.__empty_constructs__;
	while(_g1 < _g2.length) {
		var file = _g2[_g1];
		++_g1;
		var piece = backrowSetup.get(file);
		var this2 = this.board;
		var k = new chxess_Coord(chxess_Rank.R1,file);
		var v = new chxess_Piece(chxess_Color.White,piece);
		var _this = this2.keys;
		var key = k.hashCode();
		_this.h[key] = k;
		var _this1 = this2.values;
		var key1 = k.hashCode();
		_this1.h[key1] = v;
		var this3 = this.board;
		var k1 = new chxess_Coord(chxess_Rank.R8,file);
		var v1 = new chxess_Piece(chxess_Color.Black,piece);
		var _this2 = this3.keys;
		var key2 = k1.hashCode();
		_this2.h[key2] = k1;
		var _this3 = this3.values;
		var key3 = k1.hashCode();
		_this3.h[key3] = v1;
		var this4 = this.board;
		var k2 = new chxess_Coord(chxess_Rank.R2,file);
		var v2 = new chxess_Piece(chxess_Color.White,chxess_Type.Pawn);
		var _this4 = this4.keys;
		var key4 = k2.hashCode();
		_this4.h[key4] = k2;
		var _this5 = this4.values;
		var key5 = k2.hashCode();
		_this5.h[key5] = v2;
		var this5 = this.board;
		var k3 = new chxess_Coord(chxess_Rank.R7,file);
		var v3 = new chxess_Piece(chxess_Color.Black,chxess_Type.Pawn);
		var _this6 = this5.keys;
		var key6 = k3.hashCode();
		_this6.h[key6] = k3;
		var _this7 = this5.values;
		var key7 = k3.hashCode();
		_this7.h[key7] = v3;
	}
	if(initialLayout != null) {
		this.setBoard(initialLayout);
	}
	if(initialTurn != null) {
		this.setTurn(initialTurn);
	}
};
chxess_Chxess.__name__ = true;
chxess_Chxess.prototype = {
	clone: function() {
		return new chxess_Chxess(this.getBoard(),this.getTurn());
	}
	,getTurn: function() {
		if(this.turn == chxess_Color.White) {
			return "w";
		} else {
			return "b";
		}
	}
	,setTurn: function(newTurn) {
		switch(newTurn) {
		case "b":
			this.turn = chxess_Color.Black;
			break;
		case "w":
			this.turn = chxess_Color.White;
			break;
		default:
			throw new js__$Boot_HaxeError("Error: Invalid turn value: " + newTurn);
		}
	}
	,toggleTurn: function() {
		var _g = this.turn;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = chxess_Color.Black;
			break;
		case 1:
			tmp = chxess_Color.White;
			break;
		}
		this.turn = tmp;
	}
	,isInCheck: function() {
		this.toggleTurn();
		var canTakeKing = false;
		var _g = 0;
		var _g1 = this.getMovesAll();
		while(_g < _g1.length) {
			var moveStr = _g1[_g];
			++_g;
			var move = chxess_Move.fromString(moveStr,this);
			if(move.capture != null && move.capture.type == chxess_Type.King) {
				canTakeKing = true;
				break;
			}
		}
		this.toggleTurn();
		return canTakeKing;
	}
	,isInCheckmate: function() {
		if(this.isInCheck()) {
			return this.getMoves().length == 0;
		} else {
			return false;
		}
	}
	,isInStalemate: function() {
		if(!this.isInCheck()) {
			return this.getMoves().length == 0;
		} else {
			return false;
		}
	}
	,isGameOver: function() {
		return this.getMoves().length == 0;
	}
	,getBoard: function() {
		var ranks = [];
		var _g = 0;
		var _g1 = chxess_Rank.__empty_constructs__;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			var file = [];
			var _g2 = 0;
			var _g3 = chxess_File.__empty_constructs__;
			while(_g2 < _g3.length) {
				var f = _g3[_g2];
				++_g2;
				var this1 = this.board;
				var k = new chxess_Coord(r,f);
				var _this = this1.values;
				var key = k.hashCode();
				var piece = _this.h[key];
				file.push(piece != null ? piece.toString() : "");
			}
			ranks.push(file);
		}
		ranks.reverse();
		return ranks;
	}
	,setBoard: function(newBoard) {
		var _g = 0;
		while(_g < 8) {
			var r = _g++;
			var rank = Type.createEnumIndex(chxess_Rank,7 - r,null);
			var _g1 = 0;
			while(_g1 < 8) {
				var f = _g1++;
				var file = Type.createEnumIndex(chxess_File,f,null);
				var coord = new chxess_Coord(rank,file);
				var pieceString = newBoard[r][f];
				if(pieceString == "") {
					var this1 = this.board;
					this1.values.remove(coord.hashCode());
					this1.keys.remove(coord.hashCode());
				} else {
					var piece = chxess_Piece.fromString(pieceString);
					var this2 = this.board;
					var _this = this2.keys;
					var key = coord.hashCode();
					_this.h[key] = coord;
					var _this1 = this2.values;
					var key1 = coord.hashCode();
					_this1.h[key1] = piece;
				}
			}
		}
	}
	,clearBoard: function() {
		var key = this.board.keys.iterator();
		while(key.hasNext()) {
			var key1 = key.next();
			var this1 = this.board;
			this1.values.remove(key1.hashCode());
			this1.keys.remove(key1.hashCode());
		}
	}
	,getSquare: function(coord) {
		var coord1 = chxess_Coord.fromString(coord);
		var _this = this.board.values;
		var key = coord1.hashCode();
		var piece = _this.h[key];
		if(piece != null) {
			return piece.toString();
		} else {
			return "";
		}
	}
	,setSquare: function(coord,piece) {
		var coord1 = chxess_Coord.fromString(coord);
		if(piece == "") {
			var this1 = this.board;
			this1.values.remove(coord1.hashCode());
			this1.keys.remove(coord1.hashCode());
		} else {
			var piece1 = chxess_Piece.fromString(piece);
			var this2 = this.board;
			var _this = this2.keys;
			var key = coord1.hashCode();
			_this.h[key] = coord1;
			var _this1 = this2.values;
			var key1 = coord1.hashCode();
			_this1.h[key1] = piece1;
		}
	}
	,getMoves: function(coord) {
		var rawMoves;
		if(coord != null) {
			rawMoves = this.getMovesSingle(chxess_Coord.fromString(coord));
		} else {
			rawMoves = this.getMovesAll();
		}
		return this.filterMovesIntoCheck(rawMoves);
	}
	,playMove: function(move) {
		var move1 = chxess_Move.fromString(move,this);
		var _this = this.board.values;
		var key = move1.start.hashCode();
		var piece = _this.h[key];
		if(piece == null) {
			return false;
		}
		if(piece.color != this.turn) {
			return false;
		}
		var isValid = false;
		var moveStr = move1.toString();
		var _g = 0;
		var _g1 = this.getMovesAll();
		while(_g < _g1.length) {
			var validMove = _g1[_g];
			++_g;
			if(moveStr == validMove) {
				isValid = true;
				break;
			}
		}
		if(!isValid) {
			return false;
		}
		var this1 = this.board;
		var k = move1.start;
		this1.values.remove(k.hashCode());
		this1.keys.remove(k.hashCode());
		var this2 = this.board;
		var k1 = move1.end;
		var _this1 = this2.keys;
		var key1 = k1.hashCode();
		_this1.h[key1] = k1;
		var _this2 = this2.values;
		var key2 = k1.hashCode();
		_this2.h[key2] = piece;
		this.toggleTurn();
		return true;
	}
	,filterMovesIntoCheck: function(moves) {
		var _gthis = this;
		return moves.filter(function(move) {
			var chx = _gthis.clone();
			chx.playMove(move);
			chx.toggleTurn();
			return !chx.isInCheck();
		});
	}
	,getMovesAll: function() {
		var moves = [];
		var coord = this.board.keys.iterator();
		while(coord.hasNext()) {
			var coord1 = coord.next();
			var _this = this.board.values;
			var key = coord1.hashCode();
			var piece = _this.h[key];
			if(piece.color == this.turn) {
				var sMoves = this.getMovesSingle(coord1);
				var coordStr = coord1.toString();
				var pieceStr = piece.toString();
				var numMoves = sMoves.length;
				var movesStr = sMoves.map(function(v) {
					return v.toString();
				}).join(", ");
				moves = moves.concat(sMoves);
			}
		}
		return moves;
	}
	,getMovesSingle: function(coord) {
		var _this = this.board.values;
		var key = coord.hashCode();
		var piece = _this.h[key];
		if(piece == null) {
			return [];
		} else {
			var moves;
			if(this.turn != piece.color) {
				return [];
			}
			var _g = piece.type;
			switch(_g[1]) {
			case 0:
				var color = piece.color;
				var isOnHomeRow;
				switch(color[1]) {
				case 0:
					isOnHomeRow = chxess_Rank.R2;
					break;
				case 1:
					isOnHomeRow = chxess_Rank.R7;
					break;
				}
				var isOnHomeRow1 = coord.rank == isOnHomeRow;
				var rankDir;
				switch(color[1]) {
				case 0:
					rankDir = 1;
					break;
				case 1:
					rankDir = -1;
					break;
				}
				var arr_0 = rankDir;
				var arr_1 = 0;
				var this1 = [arr_0,arr_1];
				var normalMoves = this.getAllMovesInDirs(coord,[this1],{ maxDist : isOnHomeRow1 ? 2 : 1, excludeCaptures : true});
				var arr_01 = rankDir;
				var arr_11 = 1;
				var this2 = [arr_01,arr_11];
				var arr_02 = rankDir;
				var arr_12 = -1;
				var this3 = [arr_02,arr_12];
				var capturingMoves = this.getAllMovesInDirs(coord,[this2,this3],{ maxDist : 1, onlyCaptures : true});
				moves = normalMoves.concat(capturingMoves);
				break;
			case 1:
				var arr_03 = -1;
				var arr_13 = -2;
				var this4 = [arr_03,arr_13];
				var arr_04 = -1;
				var arr_14 = 2;
				var this5 = [arr_04,arr_14];
				var arr_05 = -2;
				var arr_15 = -1;
				var this6 = [arr_05,arr_15];
				var arr_06 = -2;
				var arr_16 = 1;
				var this7 = [arr_06,arr_16];
				var arr_07 = 1;
				var arr_17 = -2;
				var this8 = [arr_07,arr_17];
				var arr_08 = 1;
				var arr_18 = 2;
				var this9 = [arr_08,arr_18];
				var arr_09 = 2;
				var arr_19 = -1;
				var this10 = [arr_09,arr_19];
				var arr_010 = 2;
				var arr_110 = 1;
				var this11 = [arr_010,arr_110];
				moves = this.getAllMovesInDirs(coord,[this4,this5,this6,this7,this8,this9,this10,this11],{ maxDist : 1});
				break;
			case 2:
				var arr_011 = 1;
				var arr_111 = 1;
				var this12 = [arr_011,arr_111];
				var arr_012 = 1;
				var arr_112 = -1;
				var this13 = [arr_012,arr_112];
				var arr_013 = -1;
				var arr_113 = 1;
				var this14 = [arr_013,arr_113];
				var arr_014 = -1;
				var arr_114 = -1;
				var this15 = [arr_014,arr_114];
				moves = this.getAllMovesInDirs(coord,[this12,this13,this14,this15]);
				break;
			case 3:
				var arr_015 = 1;
				var arr_115 = 0;
				var this16 = [arr_015,arr_115];
				var arr_016 = -1;
				var arr_116 = 0;
				var this17 = [arr_016,arr_116];
				var arr_017 = 0;
				var arr_117 = 1;
				var this18 = [arr_017,arr_117];
				var arr_018 = 0;
				var arr_118 = -1;
				var this19 = [arr_018,arr_118];
				moves = this.getAllMovesInDirs(coord,[this16,this17,this18,this19]);
				break;
			case 4:
				var arr_019 = 1;
				var arr_119 = 1;
				var this20 = [arr_019,arr_119];
				var arr_020 = 1;
				var arr_120 = -1;
				var this21 = [arr_020,arr_120];
				var arr_021 = -1;
				var arr_121 = 1;
				var this22 = [arr_021,arr_121];
				var arr_022 = -1;
				var arr_122 = -1;
				var this23 = [arr_022,arr_122];
				var arr_023 = 1;
				var arr_123 = 0;
				var this24 = [arr_023,arr_123];
				var arr_024 = -1;
				var arr_124 = 0;
				var this25 = [arr_024,arr_124];
				var arr_025 = 0;
				var arr_125 = 1;
				var this26 = [arr_025,arr_125];
				var arr_026 = 0;
				var arr_126 = -1;
				var this27 = [arr_026,arr_126];
				moves = this.getAllMovesInDirs(coord,[this20,this21,this22,this23,this24,this25,this26,this27]);
				break;
			case 5:
				var arr_027 = 0;
				var arr_127 = 1;
				var this28 = [arr_027,arr_127];
				var arr_028 = 1;
				var arr_128 = 1;
				var this29 = [arr_028,arr_128];
				var arr_029 = 1;
				var arr_129 = 0;
				var this30 = [arr_029,arr_129];
				var arr_030 = 1;
				var arr_130 = -1;
				var this31 = [arr_030,arr_130];
				var arr_031 = 0;
				var arr_131 = -1;
				var this32 = [arr_031,arr_131];
				var arr_032 = -1;
				var arr_132 = -1;
				var this33 = [arr_032,arr_132];
				var arr_033 = -1;
				var arr_133 = 0;
				var this34 = [arr_033,arr_133];
				var arr_034 = -1;
				var arr_134 = 1;
				var this35 = [arr_034,arr_134];
				moves = this.getAllMovesInDirs(coord,[this28,this29,this30,this31,this32,this33,this34,this35],{ maxDist : 1});
				break;
			}
			return moves.map(function(move) {
				return move.toString();
			});
		}
	}
	,getQueenMoves: function(coord) {
		var arr_0 = 1;
		var arr_1 = 1;
		var this1 = [arr_0,arr_1];
		var arr_01 = 1;
		var arr_11 = -1;
		var this2 = [arr_01,arr_11];
		var arr_02 = -1;
		var arr_12 = 1;
		var this3 = [arr_02,arr_12];
		var arr_03 = -1;
		var arr_13 = -1;
		var this4 = [arr_03,arr_13];
		var arr_04 = 1;
		var arr_14 = 0;
		var this5 = [arr_04,arr_14];
		var arr_05 = -1;
		var arr_15 = 0;
		var this6 = [arr_05,arr_15];
		var arr_06 = 0;
		var arr_16 = 1;
		var this7 = [arr_06,arr_16];
		var arr_07 = 0;
		var arr_17 = -1;
		var this8 = [arr_07,arr_17];
		return this.getAllMovesInDirs(coord,[this1,this2,this3,this4,this5,this6,this7,this8]);
	}
	,getBishopMoves: function(coord) {
		var arr_0 = 1;
		var arr_1 = 1;
		var this1 = [arr_0,arr_1];
		var arr_01 = 1;
		var arr_11 = -1;
		var this2 = [arr_01,arr_11];
		var arr_02 = -1;
		var arr_12 = 1;
		var this3 = [arr_02,arr_12];
		var arr_03 = -1;
		var arr_13 = -1;
		var this4 = [arr_03,arr_13];
		return this.getAllMovesInDirs(coord,[this1,this2,this3,this4]);
	}
	,getRookMoves: function(coord) {
		var arr_0 = 1;
		var arr_1 = 0;
		var this1 = [arr_0,arr_1];
		var arr_01 = -1;
		var arr_11 = 0;
		var this2 = [arr_01,arr_11];
		var arr_02 = 0;
		var arr_12 = 1;
		var this3 = [arr_02,arr_12];
		var arr_03 = 0;
		var arr_13 = -1;
		var this4 = [arr_03,arr_13];
		return this.getAllMovesInDirs(coord,[this1,this2,this3,this4]);
	}
	,getKnightMoves: function(coord) {
		var arr_0 = -1;
		var arr_1 = -2;
		var this1 = [arr_0,arr_1];
		var arr_01 = -1;
		var arr_11 = 2;
		var this2 = [arr_01,arr_11];
		var arr_02 = -2;
		var arr_12 = -1;
		var this3 = [arr_02,arr_12];
		var arr_03 = -2;
		var arr_13 = 1;
		var this4 = [arr_03,arr_13];
		var arr_04 = 1;
		var arr_14 = -2;
		var this5 = [arr_04,arr_14];
		var arr_05 = 1;
		var arr_15 = 2;
		var this6 = [arr_05,arr_15];
		var arr_06 = 2;
		var arr_16 = -1;
		var this7 = [arr_06,arr_16];
		var arr_07 = 2;
		var arr_17 = 1;
		var this8 = [arr_07,arr_17];
		return this.getAllMovesInDirs(coord,[this1,this2,this3,this4,this5,this6,this7,this8],{ maxDist : 1});
	}
	,getKingMoves: function(coord) {
		var arr_0 = 0;
		var arr_1 = 1;
		var this1 = [arr_0,arr_1];
		var arr_01 = 1;
		var arr_11 = 1;
		var this2 = [arr_01,arr_11];
		var arr_02 = 1;
		var arr_12 = 0;
		var this3 = [arr_02,arr_12];
		var arr_03 = 1;
		var arr_13 = -1;
		var this4 = [arr_03,arr_13];
		var arr_04 = 0;
		var arr_14 = -1;
		var this5 = [arr_04,arr_14];
		var arr_05 = -1;
		var arr_15 = -1;
		var this6 = [arr_05,arr_15];
		var arr_06 = -1;
		var arr_16 = 0;
		var this7 = [arr_06,arr_16];
		var arr_07 = -1;
		var arr_17 = 1;
		var this8 = [arr_07,arr_17];
		return this.getAllMovesInDirs(coord,[this1,this2,this3,this4,this5,this6,this7,this8],{ maxDist : 1});
	}
	,getPawnMoves: function(coord,color) {
		var isOnHomeRow;
		switch(color[1]) {
		case 0:
			isOnHomeRow = chxess_Rank.R2;
			break;
		case 1:
			isOnHomeRow = chxess_Rank.R7;
			break;
		}
		var isOnHomeRow1 = coord.rank == isOnHomeRow;
		var rankDir;
		switch(color[1]) {
		case 0:
			rankDir = 1;
			break;
		case 1:
			rankDir = -1;
			break;
		}
		var arr_0 = rankDir;
		var arr_1 = 0;
		var this1 = [arr_0,arr_1];
		var normalMoves = this.getAllMovesInDirs(coord,[this1],{ maxDist : isOnHomeRow1 ? 2 : 1, excludeCaptures : true});
		var arr_01 = rankDir;
		var arr_11 = 1;
		var this2 = [arr_01,arr_11];
		var arr_02 = rankDir;
		var arr_12 = -1;
		var this3 = [arr_02,arr_12];
		var capturingMoves = this.getAllMovesInDirs(coord,[this2,this3],{ maxDist : 1, onlyCaptures : true});
		return normalMoves.concat(capturingMoves);
	}
	,getAllMovesInDirs: function(startCoord,dirs,opts) {
		var maxDist = 8;
		var excludeCaptures = false;
		var onlyCaptures = false;
		if(opts != null) {
			if(opts.maxDist != null) {
				maxDist = opts.maxDist;
			} else {
				maxDist = maxDist;
			}
			if(opts.excludeCaptures != null) {
				excludeCaptures = opts.excludeCaptures;
			} else {
				excludeCaptures = excludeCaptures;
			}
			if(opts.onlyCaptures != null) {
				onlyCaptures = opts.onlyCaptures;
			} else {
				onlyCaptures = onlyCaptures;
			}
		}
		var moves = [];
		var _g = 0;
		while(_g < dirs.length) {
			var dir = dirs[_g];
			++_g;
			var dist = 0;
			var coord = startCoord;
			var coordInfo;
			while(true) {
				coord = this.getCoordOffsetBy(coord,dir);
				coordInfo = this.getCoordInfo(coord);
				if(coordInfo.isOnBoard) {
					var isNormalMove = coordInfo.isEmpty;
					var isCapturingMove = !coordInfo.isEmpty && !coordInfo.isFriendly;
					if(!onlyCaptures && isNormalMove || !excludeCaptures && isCapturingMove) {
						var _this = this.board.values;
						var key = startCoord.hashCode();
						var move = _this.h[key];
						var _this1 = this.board.values;
						var key1 = coord.hashCode();
						var move1 = new chxess_Move(move,startCoord,coord,_this1.h[key1]);
						moves.push(move1);
					}
					++dist;
				}
				if(!(coordInfo.isEmpty && dist < maxDist)) {
					break;
				}
			}
		}
		return moves;
	}
	,getCoordInfo: function(coord) {
		var info = { isOnBoard : false, isEmpty : false, isFriendly : false};
		if(coord == null) {
			return info;
		} else {
			info.isOnBoard = true;
			var _this = this.board.values;
			var key = coord.hashCode();
			var piece = _this.h[key];
			info.isEmpty = piece == null;
			info.isFriendly = !info.isEmpty && piece.color == this.turn;
			return info;
		}
	}
	,getCoordOffsetBy: function(startCoord,offset) {
		var rankIndex = startCoord.rank[1];
		var fileIndex = startCoord.file[1];
		rankIndex += offset[0];
		fileIndex += offset[1];
		if(rankIndex < 0 || rankIndex > 7 || fileIndex < 0 || fileIndex > 7) {
			return null;
		}
		var newRank = Type.createEnumIndex(chxess_Rank,rankIndex,null);
		var newFile = Type.createEnumIndex(chxess_File,fileIndex,null);
		return new chxess_Coord(newRank,newFile);
	}
	,toAscii: function() {
		var fileIndicator = "  a b c d e f g h";
		var blackPieces = "   Black: K Q R B N P";
		var whitePieces = "   White: k q r b n p";
		var ranks = [fileIndicator + whitePieces];
		var _g = 0;
		var _g1 = chxess_Rank.__empty_constructs__;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			var file = [chxess_Coord.rankToString(r)];
			var _g2 = 0;
			var _g3 = chxess_File.__empty_constructs__;
			while(_g2 < _g3.length) {
				var f = _g3[_g2];
				++_g2;
				var this1 = this.board;
				var k = new chxess_Coord(r,f);
				var _this = this1.values;
				var key = k.hashCode();
				var piece = _this.h[key];
				if(piece != null) {
					var pieceStr = chxess_Piece.typeToString(piece.type);
					if(pieceStr == "") {
						pieceStr = "p";
					}
					if(piece.color == chxess_Color.Black) {
						pieceStr = pieceStr.toUpperCase();
					} else {
						pieceStr = pieceStr.toLowerCase();
					}
					file.push(pieceStr);
				} else {
					file.push("-");
				}
			}
			file.push(chxess_Coord.rankToString(r));
			ranks.push(file.join(" "));
		}
		ranks.push(fileIndicator + blackPieces);
		ranks.reverse();
		return ranks.join("\n");
	}
};
var chxess_Rank = { __ename__ : true, __constructs__ : ["R1","R2","R3","R4","R5","R6","R7","R8"] };
chxess_Rank.R1 = ["R1",0];
chxess_Rank.R1.__enum__ = chxess_Rank;
chxess_Rank.R2 = ["R2",1];
chxess_Rank.R2.__enum__ = chxess_Rank;
chxess_Rank.R3 = ["R3",2];
chxess_Rank.R3.__enum__ = chxess_Rank;
chxess_Rank.R4 = ["R4",3];
chxess_Rank.R4.__enum__ = chxess_Rank;
chxess_Rank.R5 = ["R5",4];
chxess_Rank.R5.__enum__ = chxess_Rank;
chxess_Rank.R6 = ["R6",5];
chxess_Rank.R6.__enum__ = chxess_Rank;
chxess_Rank.R7 = ["R7",6];
chxess_Rank.R7.__enum__ = chxess_Rank;
chxess_Rank.R8 = ["R8",7];
chxess_Rank.R8.__enum__ = chxess_Rank;
chxess_Rank.__empty_constructs__ = [chxess_Rank.R1,chxess_Rank.R2,chxess_Rank.R3,chxess_Rank.R4,chxess_Rank.R5,chxess_Rank.R6,chxess_Rank.R7,chxess_Rank.R8];
var chxess_File = { __ename__ : true, __constructs__ : ["A","B","C","D","E","F","G","H"] };
chxess_File.A = ["A",0];
chxess_File.A.__enum__ = chxess_File;
chxess_File.B = ["B",1];
chxess_File.B.__enum__ = chxess_File;
chxess_File.C = ["C",2];
chxess_File.C.__enum__ = chxess_File;
chxess_File.D = ["D",3];
chxess_File.D.__enum__ = chxess_File;
chxess_File.E = ["E",4];
chxess_File.E.__enum__ = chxess_File;
chxess_File.F = ["F",5];
chxess_File.F.__enum__ = chxess_File;
chxess_File.G = ["G",6];
chxess_File.G.__enum__ = chxess_File;
chxess_File.H = ["H",7];
chxess_File.H.__enum__ = chxess_File;
chxess_File.__empty_constructs__ = [chxess_File.A,chxess_File.B,chxess_File.C,chxess_File.D,chxess_File.E,chxess_File.F,chxess_File.G,chxess_File.H];
var chxess_Coord = function(rank,file) {
	this.rank = rank;
	this.file = file;
};
chxess_Coord.__name__ = true;
chxess_Coord.fromString = function(str) {
	var file = chxess_Coord.fileFromString(str.charAt(0));
	var rank = chxess_Coord.rankFromString(str.charAt(1));
	return new chxess_Coord(rank,file);
};
chxess_Coord.fileToString = function(file) {
	return file[0].toLowerCase();
};
chxess_Coord.fileFromString = function(str) {
	var _g = str.toUpperCase();
	switch(_g) {
	case "A":
		return chxess_File.A;
	case "B":
		return chxess_File.B;
	case "C":
		return chxess_File.C;
	case "D":
		return chxess_File.D;
	case "E":
		return chxess_File.E;
	case "F":
		return chxess_File.F;
	case "G":
		return chxess_File.G;
	case "H":
		return chxess_File.H;
	default:
		throw new js__$Boot_HaxeError("Error: Invalid file string: " + str);
	}
};
chxess_Coord.rankToString = function(rank) {
	return rank[0].charAt(1);
};
chxess_Coord.rankFromString = function(str) {
	switch(str) {
	case "1":
		return chxess_Rank.R1;
	case "2":
		return chxess_Rank.R2;
	case "3":
		return chxess_Rank.R3;
	case "4":
		return chxess_Rank.R4;
	case "5":
		return chxess_Rank.R5;
	case "6":
		return chxess_Rank.R6;
	case "7":
		return chxess_Rank.R7;
	case "8":
		return chxess_Rank.R8;
	default:
		throw new js__$Boot_HaxeError("Error: Invalid rank string: " + str);
	}
};
chxess_Coord.prototype = {
	hashCode: function() {
		return this.rank[1] + 8 * this.file[1];
	}
	,toString: function() {
		var fileString = chxess_Coord.fileToString(this.file);
		var rankString = chxess_Coord.rankToString(this.rank);
		return fileString + rankString;
	}
};
var chxess_Move = function(piece,start,end,capture) {
	this.piece = piece;
	this.start = start;
	this.end = end;
	this.capture = capture;
};
chxess_Move.__name__ = true;
chxess_Move.fromString = function(move,context) {
	var startIndex = move.length == 6 ? 1 : 0;
	var startCoord = chxess_Coord.fromString(HxOverrides.substr(move,startIndex,2));
	var endCoord = chxess_Coord.fromString(HxOverrides.substr(move,startIndex + 3,2));
	var piece = new chxess_Piece(chxess_Piece.colorFromString(context.getTurn()),chxess_Piece.typeFromString(move.substring(0,startIndex)));
	var capturedPieceStr = context.getSquare(endCoord.toString());
	var capturedPiece = null;
	if(capturedPieceStr != "") {
		capturedPiece = chxess_Piece.fromString(capturedPieceStr);
	}
	return new chxess_Move(piece,startCoord,endCoord,capturedPiece);
};
chxess_Move.prototype = {
	toString: function() {
		var pieceStr = chxess_Piece.typeToString(this.piece.type);
		var startStr = this.start.toString();
		var endStr = this.end.toString();
		var joinChar = this.capture != null ? "x" : "-";
		return pieceStr + startStr + joinChar + endStr;
	}
};
var chxess_Color = { __ename__ : true, __constructs__ : ["White","Black"] };
chxess_Color.White = ["White",0];
chxess_Color.White.__enum__ = chxess_Color;
chxess_Color.Black = ["Black",1];
chxess_Color.Black.__enum__ = chxess_Color;
chxess_Color.__empty_constructs__ = [chxess_Color.White,chxess_Color.Black];
var chxess_Type = { __ename__ : true, __constructs__ : ["Pawn","Knight","Bishop","Rook","Queen","King"] };
chxess_Type.Pawn = ["Pawn",0];
chxess_Type.Pawn.__enum__ = chxess_Type;
chxess_Type.Knight = ["Knight",1];
chxess_Type.Knight.__enum__ = chxess_Type;
chxess_Type.Bishop = ["Bishop",2];
chxess_Type.Bishop.__enum__ = chxess_Type;
chxess_Type.Rook = ["Rook",3];
chxess_Type.Rook.__enum__ = chxess_Type;
chxess_Type.Queen = ["Queen",4];
chxess_Type.Queen.__enum__ = chxess_Type;
chxess_Type.King = ["King",5];
chxess_Type.King.__enum__ = chxess_Type;
chxess_Type.__empty_constructs__ = [chxess_Type.Pawn,chxess_Type.Knight,chxess_Type.Bishop,chxess_Type.Rook,chxess_Type.Queen,chxess_Type.King];
var chxess_Piece = function(color,type) {
	this.color = color;
	this.type = type;
};
chxess_Piece.__name__ = true;
chxess_Piece.fromString = function(str) {
	var color = chxess_Piece.colorFromString(str.charAt(0));
	var type = chxess_Piece.typeFromString(str.charAt(1));
	return new chxess_Piece(color,type);
};
chxess_Piece.colorToString = function(color) {
	switch(color[1]) {
	case 0:
		return "w";
	case 1:
		return "b";
	}
};
chxess_Piece.colorFromString = function(str) {
	var _g = str.toUpperCase();
	switch(_g) {
	case "B":
		return chxess_Color.Black;
	case "W":
		return chxess_Color.White;
	default:
		throw new js__$Boot_HaxeError("Error: Invalid color string: " + Std.string(str));
	}
};
chxess_Piece.typeToString = function(type) {
	switch(type[1]) {
	case 0:
		return "";
	case 1:
		return "N";
	case 2:
		return "B";
	case 3:
		return "R";
	case 4:
		return "Q";
	case 5:
		return "K";
	}
};
chxess_Piece.typeFromString = function(str) {
	var _g = str.toUpperCase();
	switch(_g) {
	case "":
		return chxess_Type.Pawn;
	case "B":
		return chxess_Type.Bishop;
	case "K":
		return chxess_Type.King;
	case "N":
		return chxess_Type.Knight;
	case "Q":
		return chxess_Type.Queen;
	case "R":
		return chxess_Type.Rook;
	default:
		throw new js__$Boot_HaxeError("Error: Invalid type string: " + Std.string(str));
	}
};
chxess_Piece.prototype = {
	toString: function() {
		var colorString = chxess_Piece.colorToString(this.color);
		var typeString = chxess_Piece.typeToString(this.type);
		return colorString + typeString;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
});
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
haxe_ds__$HashMap_HashMapData.__name__ = true;
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
